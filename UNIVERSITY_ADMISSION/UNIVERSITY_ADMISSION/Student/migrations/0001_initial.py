# Generated by Django 4.2.1 on 2023-06-10 09:14

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('Admission', '__first__'),
    ]

    operations = [
        migrations.CreateModel(
            name='Admission',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('admission_num', models.IntegerField()),
                ('admission_type_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Admission.admissiontype')),
            ],
        ),
        migrations.CreateModel(
            name='Certificate',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('certificate_num', models.IntegerField()),
                ('seat_number', models.IntegerField(unique=True)),
                ('total_marks', models.IntegerField()),
                ('certificate_type_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Admission.certificatetype')),
                ('governorate_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Admission.governorate')),
            ],
        ),
        migrations.CreateModel(
            name='UserAccount',
            fields=[
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('password', models.CharField(max_length=25)),
                ('avatar', models.ImageField(upload_to='')),
                ('role', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=30)),
                ('middle_name', models.CharField(max_length=30)),
                ('last_name', models.CharField(max_length=30)),
                ('birth_date', models.DateField()),
                ('mother_name', models.CharField(max_length=30)),
                ('gender', models.BooleanField()),
                ('national_id', models.IntegerField()),
                ('user_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RequiredDocuments',
            fields=[
                ('Id', models.AutoField(primary_key=True, serialize=False)),
                ('Document_Id', models.IntegerField()),
                ('Document_Name', models.CharField(max_length=30)),
                ('Admission_Type_Id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Admission.admissiontype')),
            ],
        ),
        migrations.CreateModel(
            name='CertificationMarks',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('score', models.IntegerField()),
                ('certificate_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='marks_certificate_set', to='Student.certificate')),
                ('mark_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Admission.marks')),
            ],
        ),
        migrations.AddField(
            model_name='certificate',
            name='student_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Student.student'),
        ),
        migrations.CreateModel(
            name='AdmissionRequirements',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('document', models.ImageField(upload_to='')),
                ('valid', models.BooleanField()),
                ('admission_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Student.admission')),
                ('document_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Student.requireddocuments')),
            ],
        ),
        migrations.CreateModel(
            name='AdmissionDesire',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('priority', models.IntegerField()),
                ('admission_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Student.admission')),
                ('major_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Admission.majors')),
            ],
        ),
        migrations.AddField(
            model_name='admission',
            name='certificate_student_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Student.certificate'),
        ),
        migrations.AddField(
            model_name='admission',
            name='language_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Admission.language'),
        ),
        migrations.AddField(
            model_name='admission',
            name='status_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Admission.status'),
        ),
        migrations.AddField(
            model_name='admission',
            name='student_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Student.student'),
        ),
    ]
